plugins{
	id 'maven-publish'
   	id 'md-plugin.java'
	id 'eclipse'
	id 'idea' 
}

apply plugin: 'distribution'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

ext {
	pluginId = mdPluginProjectName
	pluginDescriptorName = "MDR_Plugin_V4MD_1720_descriptor"
}

// See https://stackoverflow.com/a/40239092/114313
version "${version}"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

eclipse {
	project {
	    // Adds VIATRA project specific entries to .project file
		natures 'org.eclipse.viatra.query.projectnature', 'org.eclipse.xtext.ui.shared.xtextNature'
		buildCommand 'org.eclipse.viatra.query.tooling.ui.projectbuilder'
		buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
	}
	classpath {
		downloadJavadoc = true
		downloadSources = true
		file {
			whenMerged { cp ->
// Registers the OpenAPI Javadoc for the appropriate jar files in Eclipse
				def fileReferenceFactory = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory()

				def entry = cp.entries.findAll{ entry -> ['md_api', 'nomagic.magicdraw'].any{ entry.path.contains(it) }  }
				
				def javadocJar = fileTree(dir: "${project(':v4md.md-dependencies').projectDir}/dependencies/openapi/docs", include: '*md-javadoc*.jar').singleFile
				
				entry.forEach{ it.javadocPath = fileReferenceFactory.fromFile(javadocJar) }
			}
		}
	}
}

dependencies {
    def exclusions = {
        exclude group: 'com.google.guava', module: 'guava'
        exclude module: 'log4j'
    }

    api group: 'org.eclipse.viatra', name: 'viatra-query-runtime', version: viatraVersion, exclusions
    api group: 'org.eclipse.viatra', name: 'viatra-transformation-runtime', version: viatraVersion, exclusions
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

apply plugin: 'md-plugin.md' 

sourceSets {
    main {
        java {
            srcDirs 'src/main'
        } 
        resources {
        	srcDirs 'src/resources'
        }   
    }
}

javadoc {
	enabled false
}

task copyLicense(type: Copy) {
    from "${rootProject.projectDir}/LICENSE"
    into "$buildDir/generated-dist"
    rename {filename -> filename.replace("LICENSE", "EULA_V4MD.txt")}
}

distZip.dependsOn copyLicense
distTar.dependsOn copyLicense

task sourceJar(type: Jar) {
	archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
	repositories {
        maven {
            url version.endsWith('-SNAPSHOT') ? deploySnapshotUrl: deployReleaseUrl
            if (deployUser != null) {
                credentials {
                    username = deployUser
                    password = deployPassword
                }
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId "${artifactId}-${mdVersion}"
            version "$version"
            
            artifact(distZip) {
				classifier 'plugin'	            	
            }
            
			artifact tasks.sourceJar
        }
    }
}

publish.dependsOn distZip
