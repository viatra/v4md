plugins{
   	id 'md-plugin.java'
	id 'eclipse'
	id 'idea' 
}

apply plugin: 'distribution'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

ext {
	pluginId = mdPluginProjectName
	pluginDescriptorName = "MDR_Plugin_V4MD_1720_descriptor"
}

// See https://stackoverflow.com/a/40239092/114313
version "${version}"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

eclipse {
	project {
	    // Adds VIATRA project specific entries to .project file
		natures 'org.eclipse.viatra.query.projectnature', 'org.eclipse.xtext.ui.shared.xtextNature'
		buildCommand 'org.eclipse.viatra.query.tooling.ui.projectbuilder'
		buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
	}
//	classpath {
//		file {
//			// Registers the OpenAPI Javadoc for the appropriate jar files in Eclipse
//			whenMerged { classpath ->
//                def javadocFile = new File(buildDir, "dependency-cache/extracted/openapi/docs/javadoc.zip")
//				classpath.entries.
//					findAll{ it instanceof org.gradle.plugins.ide.eclipse.model.Library }.
//					findAll{ openApiLibraries.any{lib -> it.path.contains(lib)}}.
//					each {
//						def factory = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory() 
//						it.setJavadocPath(factory.fromFile(javadocFile))
//					}
//			}
//        }
//	}
}

dependencies {
    def exclusions = {
        exclude group: 'com.google.guava', module: 'guava'
        exclude module: 'log4j'
    }

    api group: 'org.eclipse.viatra', name: 'viatra-query-runtime', version: viatraVersion, exclusions
    api group: 'org.eclipse.viatra', name: 'viatra-transformation-runtime', version: viatraVersion, exclusions
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

apply plugin: 'md-plugin.md' 

sourceSets {
    main {
        java {
            srcDirs 'src/main'
        } 
        resources {
        	srcDirs 'src/resources'
        }   
    }
}

javadoc {
	enabled false
}

//jvmArgs = platformConfigSetting + ['-Xmx8192M', '-Xss512M', '-noverify', '-splash:data/splash.png','-Dmd.class.path=$java.class.path', '-Dlogback.configurationFile=data/logback.xml', '-Desi.system.config=data/application.conf']

/*publishing {
    repositories {
        maven {
            url version.endsWith('-SNAPSHOT') ? deploySnapshotUrl: deployReleaseUrl
            if (deployUser != null) {
                credentials {
                    username = deployUser
                    password = deployPassword
                }
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId "${artifactId}-${mdVersion}"
            version "$version"
            from components.java
            artifact tasks.sourceJar
            artifact distZip {

                classifier "plugin"
                extension "zip"

            }
        }
    }
}*/

/*task configureTest {
	doLast {
	    project.delete "build/install/plugins/${project.name}/settings" // to enable test settings to take effect
	}
}
configureTest.dependsOn installTest*/

/*def testArgs = [
 	'-Dcom.nomagic.magicdraw.commandline.action=com.incquerylabs.v4md.test.runner.TestRunner',
 	'-Dtests.resources=../../src/test/data'
]*/
