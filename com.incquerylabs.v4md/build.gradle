plugins{
	id 'maven-publish'
   	id 'md-plugin.java'
	id 'eclipse'
	id 'idea' 
}

apply plugin: 'distribution'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

ext {
	pluginId = mdPluginProjectName
	pluginDescriptorName = "MDR_Plugin_V4MD_1720_descriptor"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

//This is the part that is painful to maintain, as MD releases tend to move around these library jars
ext.classpathLibraries = [
        'lib/patch.jar',
        'lib/md.jar',
        'lib/md_api.jar',
        'lib/md_common.jar',
        'lib/md_common_api.jar',
        'lib/md_common_test.jar',
        'lib/tw_common.jar',
        'lib/tw_common_api.jar',
        'lib/launcher.jar',
        'lib/activation.jar'
]

String[] openApiLibraries = classpathLibraries + [
		'lib/bundles/com.nomagic.magicdraw.uml2'
]

eclipse {
	project {
	    // Adds VIATRA project specific entries to .project file
		natures 'org.eclipse.viatra.query.projectnature', 'org.eclipse.xtext.ui.shared.xtextNature'
		buildCommand 'org.eclipse.viatra.query.tooling.ui.projectbuilder'
		buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
	}
	classpath {
		file {
			// Registers the OpenAPI Javadoc for the appropriate jar files in Eclipse
			whenMerged { classpath ->
                def javadocFile = new File(buildDir, "dependency-cache/extracted/openapi/docs/javadoc.zip")
				classpath.entries.
					findAll{ it instanceof org.gradle.plugins.ide.eclipse.model.Library }.
					findAll{ openApiLibraries.any{lib -> it.path.contains(lib)}}.
					each {
						def factory = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory() 
						it.setJavadocPath(factory.fromFile(javadocFile))
					}
			}
        }
	}
}

dependencies {
    def exclusions = {
        exclude group: 'com.google.guava', module: 'guava'
        exclude module: 'log4j'
    }

    api group: 'org.eclipse.viatra', name: 'viatra-query-runtime', version: viatraVersion, exclusions
    api group: 'org.eclipse.viatra', name: 'viatra-transformation-runtime', version: viatraVersion, exclusions
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

apply plugin: 'md-plugin.md' 

sourceSets {
    main {
        java {
            srcDirs 'src/main'
        } 
        resources {
        	srcDirs 'src/resources'
        }   
    }
}

javadoc {
	enabled false
}

task copyLicense(type: Copy) {
    from "${rootProject.projectDir}/LICENSE"
    into "$buildDir/generated-dist"
    rename {filename -> filename.replace("LICENSE", "EULA_V4MD.txt")}
}

distZip.dependsOn copyLicense
distTar.dependsOn copyLicense

task sourceJar(type: Jar) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

publishing {
	repositories {
        maven {
            url version.endsWith('-SNAPSHOT') ? deploySnapshotUrl: deployReleaseUrl
            if (deployUser != null) {
                credentials {
                    username = deployUser
                    password = deployPassword
                }
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId "${artifactId}-${mdVersion}"
            version "$version"
            
            artifact(distZip) {
				classifier 'plugin'	            	
            }
            
			artifact tasks.sourceJar
        }
    }
}

publish.dependsOn distZip
